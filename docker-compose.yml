version: "3.8"

services:
    auth_service:
        image: auth_service
        container_name: auth_service
        build:
            context: .
            dockerfile: ./authentication_service/Dockerfile
        restart: on-failure
        environment:
            AUTHENTICATION_SERVICE_PORT: ${AUTHENTICATION_SERVICE_PORT}
            MONGO_DB_HOST: ${AUTHENTICATION_MONGO_DB_HOST_DOCKER}
            MONGO_DB_PORT: ${MONGO_DB_PORT}
            REGISTER_USER_COMMAND_SUBJECT: ${REGISTER_USER_COMMAND_SUBJECT}
            REGISTER_USER_REPLY_SUBJECT: ${REGISTER_USER_REPLY_SUBJECT}
            UPDATE_USER_COMMAND_SUBJECT: ${UPDATE_USER_COMMAND_SUBJECT}
            UPDATE_USER_REPLY_SUBJECT: ${UPDATE_USER_REPLY_SUBJECT}
            NATS_HOST: ${NATS_HOST}
            NATS_PORT: ${NATS_PORT}
            NATS_USER: ${NATS_USER}
            NATS_PASS: ${NATS_PASS}
        depends_on:
          - auth_mongo_db
        networks:
          - network

    user_service:
        image: user_service
        container_name: user_service
        build:
            context: .
            dockerfile: ./user_service/Dockerfile
        restart: on-failure
        environment:
            USER_SERVICE_PORT: ${USER_SERVICE_PORT}
            MONGO_DB_HOST: ${USER_MONGO_DB_HOST_DOCKER}
            MONGO_DB_PORT: ${MONGO_DB_PORT}
            REGISTER_USER_COMMAND_SUBJECT: ${REGISTER_USER_COMMAND_SUBJECT}
            REGISTER_USER_REPLY_SUBJECT: ${REGISTER_USER_REPLY_SUBJECT}
            UPDATE_USER_COMMAND_SUBJECT: ${UPDATE_USER_COMMAND_SUBJECT}
            UPDATE_USER_REPLY_SUBJECT: ${UPDATE_USER_REPLY_SUBJECT}
            CREATE_NOTIFICATION_COMMAND_SUBJECT: ${CREATE_NOTIFICATION_COMMAND_SUBJECT}
            CREATE_NOTIFICATION_REPLY_SUBJECT: ${CREATE_NOTIFICATION_REPLY_SUBJECT}
            CONNECTION_NOTIFICATION_COMMAND_SUBJECT: ${CONNECTION_NOTIFICATION_COMMAND_SUBJECT}
            CONNECTION_NOTIFICATION_REPLY_SUBJECT: ${CONNECTION_NOTIFICATION_REPLY_SUBJECT}
            MESSAGE_NOTIFICATION_COMMAND_SUBJECT: ${MESSAGE_NOTIFICATION_COMMAND_SUBJECT}
            MESSAGE_NOTIFICATION_REPLY_SUBJECT: ${MESSAGE_NOTIFICATION_REPLY_SUBJECT}
            NATS_HOST: ${NATS_HOST}
            NATS_PORT: ${NATS_PORT}
            NATS_USER: ${NATS_USER}
            NATS_PASS: ${NATS_PASS}
        depends_on:
            - user_mongo_db
        networks:
            - network
      
    post_service:
        image: post_service
        container_name: post_service
        build:
            context: .
            dockerfile: ./post_service/Dockerfile
        restart: on-failure
        environment:
            POST_SERVICE_PORT: ${POST_SERVICE_PORT}
            MONGO_DB_HOST: ${POST_MONGO_DB_HOST_DOCKER}
            MONGO_DB_PORT: ${MONGO_DB_PORT}
            NATS_HOST: ${NATS_HOST}
            NATS_PORT: ${NATS_PORT}
            NATS_USER: ${NATS_USER}
            NATS_PASS: ${NATS_PASS}
            CREATE_NOTIFICATION_COMMAND_SUBJECT: ${CREATE_NOTIFICATION_COMMAND_SUBJECT}
            CREATE_NOTIFICATION_REPLY_SUBJECT: ${CREATE_NOTIFICATION_REPLY_SUBJECT}

        depends_on:
            - post_mongo_db
        networks:
            - network

    notification_service:
        image: notification_service
        container_name: notification_service
        build:
            context: .
            dockerfile: ./notification_service/Dockerfile
        restart: on-failure
        environment:
            NOTIFICATION_SERVICE_PORT: ${NOTIFICATION_SERVICE_PORT}
            MONGO_DB_HOST: ${NOTIFICATION_MONGO_DB_HOST_DOCKER}
            MONGO_DB_PORT: ${MONGO_DB_PORT}
            NATS_HOST: ${NATS_HOST}
            NATS_PORT: ${NATS_PORT}
            NATS_USER: ${NATS_USER}
            NATS_PASS: ${NATS_PASS}
            CREATE_NOTIFICATION_COMMAND_SUBJECT: ${CREATE_NOTIFICATION_COMMAND_SUBJECT}
            CREATE_NOTIFICATION_REPLY_SUBJECT: ${CREATE_NOTIFICATION_REPLY_SUBJECT}
            CONNECTION_NOTIFICATION_COMMAND_SUBJECT: ${CONNECTION_NOTIFICATION_COMMAND_SUBJECT}
            CONNECTION_NOTIFICATION_REPLY_SUBJECT: ${CONNECTION_NOTIFICATION_REPLY_SUBJECT}
            MESSAGE_NOTIFICATION_COMMAND_SUBJECT: ${MESSAGE_NOTIFICATION_COMMAND_SUBJECT}
            MESSAGE_NOTIFICATION_REPLY_SUBJECT: ${MESSAGE_NOTIFICATION_REPLY_SUBJECT}
        depends_on:
            -  notification_mongo_db
        networks:
            - network



    message_service:
        image: message_service
        container_name: message_service
        build:
            context: .
            dockerfile: ./message_service/Dockerfile
        restart: on-failure
        environment:
            MESSAGE_SERVICE_PORT: ${MESSAGE_SERVICE_PORT}
            MONGO_DB_HOST: ${MESSAGE_MONGO_DB_HOST_DOCKER}
            MONGO_DB_PORT: ${MONGO_DB_PORT}
            NATS_HOST: ${NATS_HOST}
            NATS_PORT: ${NATS_PORT}
            NATS_USER: ${NATS_USER}
            NATS_PASS: ${NATS_PASS}
            MESSAGE_NOTIFICATION_COMMAND_SUBJECT: ${MESSAGE_NOTIFICATION_COMMAND_SUBJECT}
            MESSAGE_NOTIFICATION_REPLY_SUBJECT: ${MESSAGE_NOTIFICATION_REPLY_SUBJECT}
        depends_on:
            - message_mongo_db
        networks:
            - network

    connection_service:
        image: connection_service
        container_name: connection_service
        build:
            context: .
            dockerfile: ./connection_service/Dockerfile
        restart: on-failure
        environment:
            CONNECTION_SERVICE_HOST: ${CONNECTION_SERVICE_HOST_DOCKER}
            CONNECTION_SERVICE_PORT: ${CONNECTION_SERVICE_PORT}
            NEO4J_URI: ${NEO4J_URI}
            NEO4J_HOST: ${NEO4J_HOST_DOCKER}
            NEO4J_PORT: ${NEO4J_PORT}
            NEO4J_USERNAME: ${NEO4J_USERNAME}
            NEO4J_PASSWORD: ${NEO4J_PASSWORD}
            USER_SERVICE_HOST: ${USER_SERVICE_HOST_DOCKER}
            USER_SERVICE_PORT: ${USER_SERVICE_PORT}
            REGISTER_USER_COMMAND_SUBJECT: ${REGISTER_USER_COMMAND_SUBJECT}
            REGISTER_USER_REPLY_SUBJECT: ${REGISTER_USER_REPLY_SUBJECT}
            UPDATE_USER_COMMAND_SUBJECT: ${UPDATE_USER_COMMAND_SUBJECT}
            UPDATE_USER_REPLY_SUBJECT: ${UPDATE_USER_REPLY_SUBJECT}
            CREATE_NOTIFICATION_COMMAND_SUBJECT: ${CREATE_NOTIFICATION_COMMAND_SUBJECT}
            CREATE_NOTIFICATION_REPLY_SUBJECT: ${CREATE_NOTIFICATION_REPLY_SUBJECT}
            CONNECTION_NOTIFICATION_COMMAND_SUBJECT: ${CONNECTION_NOTIFICATION_COMMAND_SUBJECT}
            CONNECTION_NOTIFICATION_REPLY_SUBJECT: ${CONNECTION_NOTIFICATION_REPLY_SUBJECT}
            NATS_HOST: ${NATS_HOST}
            NATS_PORT: ${NATS_PORT}
            NATS_USER: ${NATS_USER}
            NATS_PASS: ${NATS_PASS}
        depends_on:
            - neo4j
        networks:
            - network

    job_service:
        image: job_service
        container_name: job_service
        build:
            context: .
            dockerfile: ./job_service/Dockerfile
        restart: always
        environment:
            JOB_SERVICE_HOST: ${JOB_SERVICE_HOST_DOCKER}
            JOB_SERVICE_PORT: ${JOB_SERVICE_PORT}
            NEO4J_URI: ${NEO4J_URI}
            NEO4J_HOST: ${NEO4J_HOST_JOB_DOCKER}
            NEO4J_PORT: ${NEO4J_PORT_JOB}
            NEO4J_USERNAME: ${NEO4J_USERNAME}
            NEO4J_PASSWORD: ${NEO4J_PASSWORD}
            NATS_HOST: ${NATS_HOST}
            NATS_PORT: ${NATS_PORT}
            NATS_USER: ${NATS_USER}
            NATS_PASS: ${NATS_PASS}
            REGISTER_USER_COMMAND_SUBJECT: ${REGISTER_USER_COMMAND_SUBJECT}
            REGISTER_USER_REPLY_SUBJECT: ${REGISTER_USER_REPLY_SUBJECT}
            UPDATE_USER_COMMAND_SUBJECT: ${UPDATE_USER_COMMAND_SUBJECT}
            UPDATE_USER_REPLY_SUBJECT: ${UPDATE_USER_REPLY_SUBJECT}
        networks:
            - network


    api_gateway:
        image: api_gateway
        container_name: api_gateway
        build:
            context: .
            dockerfile: ./api_gateway/Dockerfile
        restart: on-failure
        ports:
            - ${GATEWAY_PORT}:${GATEWAY_PORT}
        environment:
            GATEWAY_PORT: ${GATEWAY_PORT}
            POST_SERVICE_HOST: ${POST_SERVICE_HOST_DOCKER}
            POST_SERVICE_PORT: ${POST_SERVICE_PORT}
            USER_SERVICE_HOST: ${USER_SERVICE_HOST_DOCKER}
            USER_SERVICE_PORT: ${USER_SERVICE_PORT}
            AUTHENTICATION_SERVICE_HOST: ${AUTHENTICATION_SERVICE_HOST_DOCKER}
            AUTHENTICATION_SERVICE_PORT: ${AUTHENTICATION_SERVICE_PORT}
            CONNECTION_SERVICE_HOST: ${CONNECTION_SERVICE_HOST_DOCKER}
            CONNECTION_SERVICE_PORT: ${CONNECTION_SERVICE_PORT}
            JOB_SERVICE_HOST: ${JOB_SERVICE_HOST_DOCKER}
            JOB_SERVICE_PORT: ${JOB_SERVICE_PORT}
            MESSAGE_SERVICE_HOST: ${MESSAGE_SERVICE_HOST_DOCKER}
            MESSAGE_SERVICE_PORT: ${MESSAGE_SERVICE_PORT}
            NOTIFICATION_SERVICE_HOST: ${NOTIFICATION_SERVICE_HOST_DOCKER}
            NOTIFICATION_SERVICE_PORT: ${NOTIFICATION_SERVICE_PORT}
        networks:
            - network

    auth_mongo_db:
        image: mongo
        container_name: auth_mongo_db
        command: mongod --quiet --logpath /dev/null
        restart: on-failure
        ports:
            - '4001:27017'
        volumes:
            - auth_data:/data/db
        networks:
            - network



    user_mongo_db:
        image: mongo
        container_name: user_mongo_db
        command: mongod --quiet --logpath /dev/null
        restart: on-failure
        ports:
            - '4002:27017'
        volumes:
            -   user_data:/data/db
        networks:
            - network

    post_mongo_db:
        image: mongo
        container_name: post_mongo_db
        command: mongod --quiet --logpath /dev/null
        restart: on-failure
        ports:
            - '4003:27017'
        volumes:
            - posts_data:/data/db
        networks:
            - network

    message_mongo_db:
        image: mongo
        container_name: message_mongo_db
        command: mongod --quiet --logpath /dev/null
        restart: on-failure
        ports:
            - '4004:27017'
        volumes:
            - message_data:/data/db
        networks:
            - network

    notification_mongo_db:
        image: mongo
        container_name: notification_mongo_db
        command: mongod --quiet --logpath /dev/null
        restart: on-failure
        ports:
            - '4005:27017'
        volumes:
            - notification_data:/data/db
        networks:
            - network

    neo4j:
        image: neo4j:4.4.3
        container_name: neo4j
        hostname: neo4j
        restart: on-failure
        ports:
            - ${NEO4J_PORT}:${NEO4J_PORT}
            - ${NEO4J_PORT_2}:${NEO4J_PORT_2}
        environment:
            NEO4J_AUTH: none
            NEO4J_dbms_allow__upgrade: 'true'
        networks:
            - network

    neo4j_jobs:
        image: neo4j:4.4.4
        container_name: neo4j_jobs
        hostname: neo4j_jobs
        restart: on-failure
        ports:
            - ${NEO4J_PORT_JOB}:${NEO4J_PORT_JOB}
            - ${NEO4J_PORT_2_JOB}:${NEO4J_PORT_2_JOB}
        environment:
            NEO4J_AUTH: none
            NEO4J_dbms_allow__upgrade: 'true'
            NEO4J_dbms_connector_bolt_listen__address: ":7686"
        networks:
            - network

    nats:
        image: nats
        container_name: nats
        restart: on-failure
        networks:
            - network
        ports:
            - 6222:6222
            - 8222:8222
            - 4222:4222


networks:
    network:
        driver: bridge

volumes:
    user_data:
        name: user-database
    posts_data:
        name: posts-database
    message_data:
        name: message-database
    auth_data:
        name: auth-database
    notification_data:
        name: notification-database